from operator import truediv

import telebot
import random
import sqlite3
from telebot import types, callback_data
import time
import requests
import threading
bot = telebot.TeleBot('7817287849:AAFxsBwLHgpn22V6I7KK_abplD93T_sKrho')
db_path = 'casino.db'

back = 'üîô Back'
casino_players = {}

# Initialize database
def init_db():
    connection = sqlite3.connect(db_path)
    cursor = connection.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS casino_users (
            chat_id INTEGER PRIMARY KEY,
            first_name TEXT,
            balance INTEGER DEFAULT 1000
        )
    ''')
    connection.commit()
    connection.close()
def get_db_connection():
    return sqlite3.connect('casino.db')
@bot.message_handler(commands=['sqlite3_private_info'])
def show_users(message):
    try:
        # –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        allowed_users = [894222865]  # –ó–∞–º–µ–Ω–∏—Ç–µ chat_id –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ

        if message.chat.id not in allowed_users:
            bot.send_message(chat_id=message.chat.id, text="You are not authorized to use this command.")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
        connection = get_db_connection()
        cursor = connection.cursor()

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('SELECT chat_id, first_name FROM casino_users')
        casino_players = cursor.fetchall()

        if casino_players:  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã
            text = "Saved users:\n"
            for user in casino_players:
                chat_id, first_name = user
                text += f"Chat ID: {chat_id}, Name: {first_name}\n"

                # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤
                if len(text) > 4000:
                    bot.send_message(chat_id=message.chat.id, text=text)
                    text = ""  # –°–±—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞

            if text:  # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞—Ç–∫–∞
                bot.send_message(chat_id=message.chat.id, text=text)
        else:
            bot.send_message(chat_id=message.chat.id, text="No users saved yet.")

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        bot.send_message(chat_id=message.chat.id, text=f"An error occurred: {e}")
    finally:
        cursor.close()
        connection.close()


# Add user to the database
def add_user(chat_id, first_name):
    try:
        connection = get_db_connection()
        cursor = connection.cursor()
        cursor.execute('SELECT * FROM casino_users WHERE chat_id = ?', (chat_id,))
        user = cursor.fetchone()
        if not user:
            cursor.execute(
                'INSERT INTO casino_users (chat_id, first_name, balance) VALUES (?, ?, ?)',
                (chat_id, first_name, 1000)
            )
            connection.commit()
    except sqlite3.Error as e:
        print(f"SQLite error: {e}")
    finally:
        cursor.close()
        connection.close()

def get_all_chat_ids():
    try:
        # –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –≤—ã–±–æ—Ä–∫–∞ chat_id
        connection = get_db_connection()
        cursor = connection.cursor()
        cursor.execute('SELECT chat_id FROM casino_users')
        return [row[0] for row in cursor.fetchall()]
    except sqlite3.Error as e:
        print(f"SQLite error: {e}")
        return []
    finally:
        cursor.close()
        connection.close()
# Main Menu
def send_menu(chat_id):
    text = f"Choose an option üì≤. We have everything to make you happy!"
    casino_players[chat_id] = chat_id
    markup = types.InlineKeyboardMarkup()

    info = types.InlineKeyboardButton('INFO üìã', callback_data='info')
    manas = types.InlineKeyboardButton('MANAS üéì', callback_data='manas')
    games = types.InlineKeyboardButton('GAMES üëæ', callback_data='games')
    random_things = types.InlineKeyboardButton('RANDOM THINGS üé≤', callback_data='random_play')
    gtp_button = types.InlineKeyboardButton('Free Chat GPT ‚ö™', callback_data='gpt')
    forbes = types.InlineKeyboardButton('FORBES üí∏', callback_data='forbes')
    markup.row(info, manas)
    markup.row(games, random_things)
    markup.row(gtp_button)
    casino = types.InlineKeyboardButton('CASINO üé∞', callback_data='casino')
    markup.row(casino)
    markup.row(forbes)
    bot.send_message(chat_id, text, reply_markup=markup)
def info(chat_id):
    text = "What information are you looking for?"
    markup = telebot.types.InlineKeyboardMarkup()
    owner = types.InlineKeyboardButton('About Owner', callback_data='owner')
    bot1 = types.InlineKeyboardButton('About Bot', callback_data='bot owner')
    back_to_main = types.InlineKeyboardButton(back, callback_data='back')
    markup.row(owner,bot1)
    markup.row(back_to_main)
    bot.send_message(chat_id, text, reply_markup=markup)
def manas(chat_id):
    text = 'The necessary information about Manas is stored here:'
    markup = types.InlineKeyboardMarkup()
    obis_test = types.InlineKeyboardButton('Obis Test üìã', url='https://obistest.manas.edu.kg/site/login')
    manas_food = types.InlineKeyboardButton('Manas Yemek üç¥', url='https://beslenme.manas.edu.kg/menu')
    time_table_manas = types.InlineKeyboardButton('Time Table üïí', url='http://timetable.manas.edu.kg/department')
    back1 = types.InlineKeyboardButton(back, callback_data='back')
    markup.row(obis_test,manas_food,time_table_manas)
    markup.row(back1)
    bot.send_message(chat_id, text, reply_markup=markup)
def games(chat_id):
    text = 'These games are available now:'
    markup = types.InlineKeyboardMarkup()
    guess_word = types.InlineKeyboardButton('Guess Word üîÆ', callback_data='guess_word')
    math_game = types.InlineKeyboardButton('Math Game üß†', callback_data='math_game')
    back1 = types.InlineKeyboardButton(back, callback_data='back')
    markup.row(guess_word)
    markup.row(math_game)
    markup.row(back1)
    bot.send_message(chat_id, text, reply_markup=markup)
def random_things(chat_id):
    text = "Choose what random thing you'd like to see üé≤:"
    markup = types.InlineKeyboardMarkup()
    fact = types.InlineKeyboardButton('Random Fact üß†', callback_data='random_fact')
    motivation = types.InlineKeyboardButton('Random Motivation üí°', callback_data='random_motivation')
    random_photo = types.InlineKeyboardButton('Random Photo üèû', callback_data='random_photo')
    joke= types.InlineKeyboardButton('Random Joke üòÇ', callback_data='random_joke')
    back1 = types.InlineKeyboardButton(back, callback_data='back')
    markup.row(fact, motivation)
    markup.row(random_photo, joke)
    markup.row(back1)
    bot.send_message(chat_id, text, reply_markup=markup)







#CASINO !!!!


# Get user balance
def get_balance(chat_id):
    connection = sqlite3.connect(db_path)
    cursor = connection.cursor()
    cursor.execute('SELECT balance FROM casino_users WHERE chat_id = ?', (chat_id,))
    result = cursor.fetchone()
    connection.close()
    if result:
        return result[0]
    return None


# Update user balance
def update_balance(chat_id, new_balance):
    connection = sqlite3.connect(db_path)
    cursor = connection.cursor()
    cursor.execute('UPDATE casino_users SET balance = ? WHERE chat_id = ?', (new_balance, chat_id))
    connection.commit()
    connection.close()





# Casino Menu
def casino_menu(chat_id):
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_balance = get_balance(chat_id)

    if current_balance is None:
        current_balance = 0  # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∞
    text = f'We always make you happy with games! üòä\nYour current balance: {current_balance}üí∞\nChoose a game you want to play:'

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–º–µ–Ω—é)
    markup = types.InlineKeyboardMarkup()
    roul_button = types.InlineKeyboardButton('ROULETTE üé°', callback_data='roulette')
    throw_cubes_button = types.InlineKeyboardButton('THROW CUBES üé≤', callback_data='throw_cubes')
    rules = types.InlineKeyboardButton('RULES üìÉ', callback_data='rules')
    back_button = types.InlineKeyboardButton(back, callback_data='back')

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    markup.row(roul_button, throw_cubes_button)
    markup.row(rules)
    markup.row(back_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    try:
        with open('welcome_casino.jpg', 'rb') as photo:
            bot.send_photo(chat_id, photo, caption=text, reply_markup=markup)
    except FileNotFoundError:
        bot.send_message(chat_id, "‚ùå Image file 'welcome_casino.jpg' not found.")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå An error occurred while sending photo: {str(e)}")

def rules_menu(chat_id):
    text = (
        "üé∞ *Casino Rules:*\n\n"
        "üéØ *Roulette*: \n"
        "1Ô∏è‚É£ Select a bet category (e.g. '1st 12', 'EVEN', 'RED').\n"
        "2Ô∏è‚É£ Wait for the roulette to show the result.\n"
        "3Ô∏è‚É£ If you win, the reward is bet amount √ó multiplier.\n\n"
        "üé≤ *Throw Cubes*: \n"
        "1Ô∏è‚É£ Choose your bet amount.\n"
        "2Ô∏è‚É£ The player rolls the dice (result: 2 to 12).\n"
        "3Ô∏è‚É£ The bot rolls its dice. If your result is higher, you win your bet.\n"
        "4Ô∏è‚É£ If the bot wins, the bet amount is deducted from your balance.\n\n"
        "Good luck and have fun! üòä"
    )
    markup = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton("üîô Back to Casino Menu", callback_data='casino')
    markup.row(back_button)
    bot.send_message(chat_id, text, reply_markup=markup)

# Roulette Game Menu
def roulette_menu(chat_id):
    text = 'Wish good luck üçÄ! Choose a category to bet on:'
    markup = types.InlineKeyboardMarkup()

    # –ü–µ—Ä–≤—ã–π —Ä—è–¥
    markup.row(
        types.InlineKeyboardButton('1st 12', callback_data='category_1st'),
        types.InlineKeyboardButton('2nd 12', callback_data='category_2nd'),
        types.InlineKeyboardButton('3rd 12', callback_data='category_3rd')
    )

    # –í—Ç–æ—Ä–æ–π —Ä—è–¥
    markup.row(
        types.InlineKeyboardButton('1 to 18', callback_data='category_1-18'),
        types.InlineKeyboardButton('EVEN', callback_data='category_even'),
        types.InlineKeyboardButton('‚ö´Ô∏è', callback_data='category_black'),
        types.InlineKeyboardButton('üî¥', callback_data='category_red'),
        types.InlineKeyboardButton('ODD', callback_data='category_odd'),
        types.InlineKeyboardButton('19 to 36', callback_data='category_19-36')
    )
    markup.row(
        types.InlineKeyboardButton('Bet on Number üéØ', callback_data='category_number')
    )

    # –ö–Ω–æ–ø–∫–∞ Back
    back_button = types.InlineKeyboardButton(back, callback_data='casino')
    markup.row(back_button)
    with open('casinoPHOTO.jpg', 'rb') as photo:
        bot.send_photo(chat_id, photo, caption=text, reply_markup=markup)




# Betting Menu
def bet_menu(chat_id, category):
    text = 'How much money üí∞do you want to bet?'
    markup = types.InlineKeyboardMarkup()

    # –ü–µ—Ä–≤—ã–π —Ä—è–¥
    markup.row(
        types.InlineKeyboardButton('100 üí∞', callback_data=f'bet_100_{category}'),
        types.InlineKeyboardButton('500 üí∞', callback_data=f'bet_500_{category}'),
        types.InlineKeyboardButton('1000 üí∞', callback_data=f'bet_1000_{category}')
    )

    # –í—Ç–æ—Ä–æ–π —Ä—è–¥
    markup.row(
        types.InlineKeyboardButton('2500 üí∞', callback_data=f'bet_2500_{category}'),
        types.InlineKeyboardButton('5000 üí∞', callback_data=f'bet_5000_{category}'),
        types.InlineKeyboardButton('10000 üí∞', callback_data=f'bet_10000_{category}')
    )

    # –ö–Ω–æ–ø–∫–∞ "Back"
    back_button = types.InlineKeyboardButton(back, callback_data='roulette')
    markup.add(back_button)

    with open('bet-casino.mp4', 'rb') as gif:
        bot.send_animation(chat_id, gif, caption=text, reply_markup=markup)



# Play Roulette


def throw_cubes_game(chat_id, bet_amount):
    # Fetch current balance
    current_balance = get_balance(chat_id)
    if current_balance is None or bet_amount > current_balance:
        markup = types.InlineKeyboardMarkup()
        play_again = types.InlineKeyboardButton('üéÆ Play Again', callback_data='throw_cubes')
        back_button = types.InlineKeyboardButton("üîô Back to Casino Menu", callback_data='casino')
        markup.add(play_again, back_button)
        bot.send_message(
            chat_id,
            "üíî Oops, it seems your balance is too low for this bet. üòû\n"
            "üí° Maybe try a smaller bet or build up your üí∞ balance!",
            reply_markup=markup,
            parse_mode="Markdown"
        )

        return

    # Player rolls the dice
    player_roll = random.randint(2, 12)
    bot.send_message(chat_id, f"üé≤ You roll the dice... You got *{player_roll}*", parse_mode="Markdown")
    time.sleep(2)  # Small delay for effect

    # Bot rolls the dice
    bot_roll = random.randint(2, 12)
    bot.send_message(chat_id, f"ü§ñ Bot rolls the dice... Bot got *{bot_roll}*", parse_mode="Markdown")
    time.sleep(1)

    # Determine the outcome
    markup = types.InlineKeyboardMarkup()
    play_again = types.InlineKeyboardButton('üéÆ Play Again', callback_data='throw_cubes')
    back_button = types.InlineKeyboardButton("üîô Back to Casino Menu", callback_data='casino')
    markup.add(play_again, back_button)

    if player_roll > bot_roll:
        winnings = bet_amount
        new_balance = current_balance + winnings
        update_balance(chat_id, new_balance)
        bot.send_message(
            chat_id,
            f"üéâ *You won!* Your roll: {player_roll}, Bot's roll: {bot_roll}\n"
            f"üí∞ *Winnings*: {winnings}\nüèÜ *New Balance*: {new_balance}",parse_mode="Markdown",reply_markup=markup
        )

    elif player_roll == bot_roll:
        bot.send_message(
            chat_id,
            f"You got the *same* numbers, reroll the dice... Bot got *{bot_roll}* and you got *{player_roll}*... ",
            parse_mode="Markdown",
            reply_markup=markup
        )
    else:
        new_balance = current_balance - bet_amount
        update_balance(chat_id, new_balance)
        bot.send_message(
            chat_id,
            f"üòû *You lost!* Your roll: {player_roll}, Bot's roll: {bot_roll}\n"
            f"üíî *Lost*: {bet_amount}\nüí∏ *New Balance*: {new_balance}",parse_mode="Markdown",reply_markup=markup
        )


def play_roulette(chat_id, bet_amount, category):
    """
    Implements the main roulette game logic.
    """
    import random
    import time
    import threading

    try:
        valid_categories = {'1st', '2nd', '3rd', '1-18', '19-36', 'even', 'odd', 'red', 'black'}

        if category not in valid_categories:
            bot.send_message(chat_id, "‚ùå Invalid category. Please select a valid betting option.")
            return "Invalid category", get_balance(chat_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä—É–ª–µ—Ç–∫–∏
        roulette_result = random.randint(0, 36)
        current_balance = get_balance(chat_id)

        RED_NUMBERS = {1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36}
        BLACK_NUMBERS = {2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35}

        won = False
        multiplier = 0

        try:
            with open('roulette-game.mp4', 'rb') as gif:
                animation_msg = bot.send_animation(
                    chat_id, gif,
                    caption='üé° *The roulette spins...*\nWill luck be on your side? ü§îüçÄ',
                    parse_mode="Markdown"
                )
            time.sleep(3)
            bot.delete_message(chat_id, animation_msg.message_id)
        except FileNotFoundError:
            bot.send_message(chat_id, "‚ö†Ô∏è Animation file not found. Spinning without animation.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
        if category == '1st' and 1 <= roulette_result <= 12:
            won, multiplier = True, 1.89
        elif category == '2nd' and 13 <= roulette_result <= 24:
            won, multiplier = True, 1.89
        elif category == '3rd' and 25 <= roulette_result <= 36:
            won, multiplier = True, 1.89
        elif category == '1-18' and 1 <= roulette_result <= 18:
            won, multiplier = True, 0.89
        elif category == '19-36' and 19 <= roulette_result <= 36:
            won, multiplier = True, 0.89
        elif category == 'even' and roulette_result != 0 and roulette_result % 2 == 0:
            won, multiplier = True, 0.89
        elif category == 'odd' and roulette_result % 2 == 1:
            won, multiplier = True, 0.89
        elif category == 'red' and roulette_result in RED_NUMBERS:
            won, multiplier = True, 0.89
        elif category == 'black' and roulette_result in BLACK_NUMBERS:
            won, multiplier = True, 0.89

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        if won:
            winnings = int(bet_amount * multiplier)
            new_balance = current_balance + winnings
            update_balance(chat_id, new_balance)
            result_text = (
                f"üéâ *The ball stopped on {roulette_result}!* ü•≥\n"
                f"üí∞ You *WIN*: {winnings} coins!\n"
                f"‚ú® *Congratulations!* Your *new balance*: {new_balance} üí∏"
            )
        else:
            new_balance = current_balance - bet_amount
            update_balance(chat_id, new_balance)
            result_text = (
                f"üíî *The ball stopped on {roulette_result}...*\n"
                f"üòû You *lost*: {bet_amount} coins.\n"
                f"üí∞ Your *current balance*: {new_balance} üí∏\n"
                "üí° *Don't give up!* Maybe luck will visit you soon. üçÄ",
            )

        return result_text, new_balance

    except Exception as e:
        print(f"Error in play_roulette: {e}")
        bot.send_message(chat_id, "‚ö†Ô∏è An error occurred during the game. Please try again later.")
        return f"Error occurred: {e}", get_balance(chat_id)



def handle_throw_cubes_bet(message):
    try:
        bet_amount = int(message.text)
        if bet_amount <= 0:
            bot.send_message(message.chat.id, "‚ùå Bet amount must be greater than 0!")
            bot.register_next_step_handler(message, handle_throw_cubes_bet)
            return

        # Start the dice game
        throw_cubes_game(message.chat.id, bet_amount)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå Please enter a valid number for your bet!")
        bot.register_next_step_handler(message, handle_throw_cubes_bet)

# Start Command
@bot.message_handler(commands=['start'])
def start(message):
    add_user(message.chat.id, message.from_user.first_name)
    chat_id = message.chat.id
    first_name = message.chat.first_name

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    text = (
        f"üëã *Welcome, {first_name}!*\n\n"
        "I'm *MarqBot*, your friendly assistant! üòé\n\n"
        "üåü Explore games, enjoy random facts, and test your luck at the casino. \n"
        "‚ú® Let's get started and have some *fun!* üéâ"
    )

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    photos = bot.get_user_profile_photos(chat_id)
    if photos.total_count > 0:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä–∫–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é
        avatar_file_id = photos.photos[0][0].file_id
        bot.send_photo(chat_id, avatar_file_id, caption=text,parse_mode="Markdown")
    else:
        # –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ç–æ
        with open("cat.jpg",
                  "rb") as photo:
            bot.send_photo(chat_id, photo, caption=text,parse_mode="Markdown")

        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    send_menu(chat_id=chat_id)
#GPT part
@bot.callback_query_handler(func=lambda call: call.data == 'gpt')
def gpt1(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    bot.send_message(call.message.chat.id, "You can use this free Telegram-Bot to ask quetions: @Buddy_GPTbot ")
    send_menu(call.message.chat.id)


# Information Part
@bot.callback_query_handler(func=lambda call: call.data == 'info')
def info1(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    info(call.message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == 'owner')
def about_owner(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    text = "üßë‚Äçüíª My owner is Marquez - @marquezpht üòé. Write to him if you have any problems with the bot or if you find any errors and help improve it üòä"
    bot.send_message(call.message.chat.id, text)
    info(call.message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == 'bot owner')
def about_owner(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    text = "This bot is designed to help and entertain people"
    bot.send_message(call.message.chat.id, text)
    info(call.message.chat.id)


# Manas Part
@bot.callback_query_handler(func=lambda call: call.data == 'manas')
def manas1(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    manas(call.message.chat.id)


# Games Part
@bot.callback_query_handler(func=lambda call: call.data == 'games') # –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–π—Ç–∏
def games1(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    games(call.message.chat.id)

#Guess Word
@bot.callback_query_handler(func=lambda call: call.data == 'guess_word') # –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
def start_new_game(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    user_id = call.message.chat.id
    original_word = random.choice(WORDS)
    shuffled_word = shuffle_word(original_word)
    user_states[user_id] = {
        "original_word": original_word,
        "shuffled_word": shuffled_word
    }
    markup = types.InlineKeyboardMarkup()
    skip_button = types.InlineKeyboardButton('Skip', callback_data='skip_word')
    markup.add(skip_button)
    bot.send_message(user_id, f'Guess the word: **{shuffled_word}**', parse_mode='Markdown', reply_markup=markup)

@bot.message_handler(func=lambda message: message.chat.id in user_states) # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏
def check_guess(message):
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    user_id = message.chat.id
    user_data = user_states.get(user_id)

    if message.text.lower() == user_data["original_word"]:
        bot.send_message(user_id, "Correct! üéâ Great job!")

        # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        user_states.pop(user_id)

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
        markup = types.InlineKeyboardMarkup()
        play_again = types.InlineKeyboardButton('Play Again', callback_data='guess_word')
        back_button = types.InlineKeyboardButton(back, callback_data='back')
        markup.row(play_again)
        markup.row(back_button)
        bot.send_message(user_id, "Want to play again?", reply_markup=markup)
    else:
        bot.send_message(user_id, "Wrong answer. Try again!")

@bot.callback_query_handler(func=lambda call: call.data == 'skip_word') # –ø—Ä–æ–ø—É—Å–∫ —Å–ª–æ–≤–∞
def skip_word(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    user_id = call.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_states:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª
        original_word = user_states[user_id]["original_word"]

        # –°–æ–æ–±—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        bot.send_message(user_id, f"You skipped the word. The correct word was: **{original_word}**",
                         parse_mode='Markdown')

        # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states.pop(user_id)

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
        markup = types.InlineKeyboardMarkup()
        play_again = types.InlineKeyboardButton('Play Again', callback_data='guess_word')
        back_button = types.InlineKeyboardButton(back, callback_data='back_games')
        markup.add(play_again)
        markup.row(back_button)
        bot.send_message(user_id, "Want to play again?", reply_markup=markup)
    else:
        # –ï—Å–ª–∏ –∏–≥—Ä—ã –Ω–µ –±—ã–ª–æ
        bot.send_message(user_id, "No active game found. Start a new game!")




#Mathematicians game
user_data = {}
@bot.callback_query_handler(func=lambda call: call.data == 'math_game')
def start_math_game(call):
    chat_id = call.message.chat.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[chat_id] = {
        "score": 0,  # –û—á–∫–∏
        "current_question": None,  # –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        "correct_answer": None  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    }
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    bot.send_message(chat_id, "Welcome to the 'Math Game'! üî¢")
    send_math_question(chat_id)
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.chat.id in user_data)
def handle_math_answer(message):
    chat_id = message.chat.id
    text = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç —á–∏—Å–ª–æ–º
    if not text.lstrip('-').isdigit():
        bot.send_message(chat_id, "Enter the number as a reply to the question.")
        return

    user_answer = int(text)
    correct_answer = user_data[chat_id]['correct_answer']

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
    if user_answer == correct_answer:
        user_data[chat_id]['score'] += 1
        bot.send_message(chat_id, "CONGRATULATIONS! You got it right! üéâ")
    else:
        bot.send_message(chat_id, f"Wrong answer üòû. The answer correct is: {correct_answer}")

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∏–≥—Ä
    markup = types.InlineKeyboardMarkup()
    continue_button = types.InlineKeyboardButton("Continue üîÑ", callback_data='continue_math_game')
    back_to_games = types.InlineKeyboardButton("BACK üîô", callback_data='back_games')
    markup.row(continue_button, back_to_games)
    bot.send_message(chat_id, "Choose what will you do next:", reply_markup=markup)
@bot.callback_query_handler(func=lambda call: call.data == 'continue_math_game')
def continue_math_game1(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    send_math_question(call.message.chat.id)
@bot.callback_query_handler(func=lambda call: call.data == 'back_games')
def back_games1(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    games(call.message.chat.id)
#Random Things Part
@bot.callback_query_handler(func=lambda call: call.data == 'random_play')
def random_play1(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    random_things(call.message.chat.id)
@bot.callback_query_handler(func=lambda call: call.data == 'random_fact')
def random_fact1(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    fact = get_random_fact()
    bot.send_message(call.message.chat.id, f"üß† Random Fact: {fact}")
    random_things(call.message.chat.id)
@bot.callback_query_handler(func=lambda call: call.data == 'random_motivation')
def random_motivation1(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    motivation = get_random_motivation()
    bot.send_message(call.message.chat.id, f"üí™ Random Motivation: {motivation}")
    random_things(call.message.chat.id)
@bot.callback_query_handler(func=lambda call: call.data == 'random_photo')
def random_photo1(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    photo = get_random_photo()
    bot.send_photo(call.message.chat.id, photo)
    random_things(call.message.chat.id)
@bot.callback_query_handler(func=lambda call: call.data == 'random_joke')
def random_joke1(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    joke = get_random_joke()
    bot.send_message(call.message.chat.id, f"üòÇ Random Joke: {joke}")
    random_things(call.message.chat.id)



# Handle Callbacks
@bot.callback_query_handler(func=lambda call: True)
def handle_callbacks(call):
    if call.data == 'casino':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        casino_menu(call.message.chat.id)
    elif call.data == 'roulette':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        roulette_menu(call.message.chat.id)
    elif call.data == 'rules':  # Show rules
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        rules_menu(call.message.chat.id)
    elif call.data == 'category_number':  # –°—Ç–∞–≤–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(call.message.chat.id, "üéØ Enter the number you want to bet on (0-36):")
        bot.register_next_step_handler_by_chat_id(call.message.chat.id,handle_number_bet)# –û–∂–∏–¥–∞–µ–º —á–∏—Å–ª–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif call.data == 'throw_cubes':  # Throw Cubes game
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(call.message.chat.id, "üí∞ Enter your bet amount:")
        bot.register_next_step_handler_by_chat_id(call.message.chat.id, handle_throw_cubes_bet)

    elif call.data.startswith('category_'):
        category = call.data.split('_')[1]
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bet_menu(call.message.chat.id, category)

    elif call.data.startswith('bet_'):
        _, bet_amount, category = call.data.split('_')
        bet_amount = int(bet_amount)
        current_balance = get_balance(call.message.chat.id)
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        if bet_amount > current_balance:
            bot.send_message(call.message.chat.id,
                             f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏! –ë–∞–ª–∞–Ω—Å: {current_balance} üí∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            bet_menu(call.message.chat.id, category)
            return

            # –ü—Ä–æ–≤–µ—Ä–∏–º –≤–æ–∑–≤—Ä–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ play_roulette
        result = play_roulette(call.message.chat.id, bet_amount, category)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞



        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ
        result_message, new_balance = result

        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton('Play Again ‚èé', callback_data=f'roulette'),
            types.InlineKeyboardButton('Back to Table üîô', callback_data='casino')
        )
        bot.send_message(call.message.chat.id, result_message, reply_markup=markup,parse_mode="Markdown")
    elif call.data == 'back':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        send_menu(call.message.chat.id)
    elif call.data == 'back_games':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        games(call.message.chat.id)
    elif call.data == 'forbes':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        show_forbes(call.message.chat.id)

def handle_number_bet(message):
    try:
        number = int(message.text)  # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –≤ —á–∏—Å–ª–æ
        if not 0 <= number <= 36:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-36
            bot.send_message(message.chat.id, "‚ùå Please enter a valid number between 0 and 36.")
            bot.register_next_step_handler(message, handle_number_bet)
            return

        # –ï—Å–ª–∏ —á–∏—Å–ª–æ –≤–∞–ª–∏–¥–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
        bot.send_message(
            message.chat.id, f"You selected number {number} ‚ú®. How much money do you want to bet? üí∏"
        )
        bot.register_next_step_handler(
            message, lambda bet_message: process_number_bet(message.chat.id, number, bet_message)
        )
    except ValueError:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ —á–∏—Å–ª–æ
        bot.send_message(message.chat.id, "‚ùå Please enter a valid number between 0 and 36.")
        bot.register_next_step_handler(message, handle_number_bet)
def process_number_bet(chat_id, number, bet_message):
    try:
        bet_amount = int(bet_message.text)  # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç–∞–≤–∫—É –≤ —á–∏—Å–ª–æ
        current_balance = get_balance(chat_id)

        if bet_amount <= 0:
            bot.send_message(chat_id, "‚ùå Bet amount must be greater than zero.")
            bot.register_next_step_handler(bet_message, lambda bm: process_number_bet(chat_id, number, bm))
            return
        elif bet_amount > current_balance:
            bot.send_message(
                chat_id,
                "üò¢ *Your balance is insufficient for this bet.*\nüí° Try a smaller wager or earn more coins!",
                parse_mode="Markdown"
            )
            time.sleep(2)
            casino_menu(chat_id)
            bot.register_next_step_handler(bet_message, lambda bm: process_number_bet(chat_id, number, bm))
            return

        # –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏ –Ω–∞ —á–∏—Å–ª–æ
        result_message, new_balance = play_roulette_number(chat_id, bet_amount, number)
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton('Play Again üîÑ', callback_data=f'roulette'),
            types.InlineKeyboardButton('Casino Menu üé∞', callback_data='casino')
        )
        bot.send_message(chat_id, result_message, reply_markup=markup)
    except ValueError:
        bot.send_message(chat_id, "‚ùå Please enter a valid bet amount.")
        bot.register_next_step_handler(bet_message, lambda bm: process_number_bet(chat_id, number, bm))
def play_roulette_number(chat_id, bet_amount, number):
    try:
        roulette_result = random.randint(0, 36)
        current_balance = get_balance(chat_id)

        if current_balance is None or bet_amount <= 0 or bet_amount > current_balance:
            return "Invalid bet: make sure your bet is positive and within your balance.", current_balance
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–ø–∏–Ω–µ —Ä—É–ª–µ—Ç–∫–∏
        with open('roulette-game.mp4', 'rb') as gif:
            animation_msg = bot.send_animation(chat_id, gif, caption='The ball is spinning...')
        time.sleep(4)
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≥–∏—Ñ–∫—É —á–µ—Ä–µ–∑ 0.1 —Å–µ–∫—É–Ω–¥—É
        threading.Timer(0.1, lambda: bot.delete_message(chat_id, animation_msg.message_id)).start()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
        if roulette_result == number:
            multiplier = 35
            winnings = int(bet_amount * multiplier)
            new_balance = current_balance + winnings
            update_balance(chat_id, new_balance)
            return f"You WON! üéâ The ball landed on {roulette_result}. Your winnings: {winnings}. New balance: {new_balance}.", new_balance
        else:
            new_balance = current_balance - bet_amount
            update_balance(chat_id, new_balance)
            return f"You LOST. üò¢ The ball landed on {roulette_result}. Your new balance: {new_balance}.", new_balance

    except Exception as e:
        print(f"Error in play_roulette_number: {e}")
        return "Internal error occurred. Please try again later.", None
def show_forbes(chat_id):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–ø-10 –±–æ–≥–∞—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –§–æ—Ä–º–∞—Ç: –º–µ—Å—Ç–æ, –∏–º—è, –±–∞–ª–∞–Ω—Å. –ú–µ–¥–∞–ª–∏ –¥–ª—è 1-3 –º–µ—Å—Ç.
    """
    connection = get_db_connection()
    cursor = connection.cursor()

    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –±–∞–ª–∞–Ω—Å–æ–º
        cursor.execute("SELECT first_name, balance FROM casino_users ORDER BY balance DESC LIMIT 10")
        top_users = cursor.fetchall()

        # –ï—Å–ª–∏ —Ç–æ–ø –ø—É—Å—Ç–æ–π
        if not top_users:
            bot.send_message(chat_id, "Forbes list is empty üôÅ")
            return

        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = "üí∏ *FORBES Richest Players*\n\nüèÜ Here are the wealthiest players daring to challenge luck:\n\n"
        medals = ["ü•á", "ü•à", "ü•â"]  # –ú–µ–¥–∞–ª–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä—ë—Ö –º–µ—Å—Ç

        for index, (name, balance) in enumerate(top_users, start=1):
            if index <= 3:
                medal = medals[index - 1]  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –º–µ–¥–∞–ª—å –¥–ª—è 1-3 –º–µ—Å—Ç
            else:
                medal = f"{index}‚É£"  # –û—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî —á–∏—Å–ª–æ —Å —ç–º–æ–¥–∑–∏
            text += f"{medal} *{index}.* {name} ‚Äî {balance} üí∞\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
        markup = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton("üîô Back", callback_data="back")
        markup.add(back_button)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.send_message(chat_id, text, reply_markup=markup, parse_mode="Markdown")

    except Exception as e:
        # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        bot.send_message(chat_id, f"An error occurred: {e}")
        print(f"Error fetching Forbes data: {e}")
    finally:
        cursor.close()
        connection.close()
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

# 1 - GAMES PART FUNCTIONS
WORDS = [
    "ability", "action", "adventure", "age", "air", "animal", "answer", "area", "army", "art",
    "baby", "back", "ball", "bank", "bed", "bird", "boat", "book", "bottle", "box",
    "boy", "bridge", "brother", "building", "business", "cake", "camera", "car", "cat", "chance",
    "change", "child", "city", "class", "climate", "cloud", "club", "coat", "coffee", "college",
    "color", "company", "computer", "country", "cow", "dance", "day", "deal", "decision", "desk",
    "development", "door", "dream", "drink", "driver", "earth", "education", "effect", "egg", "end",
    "energy", "engine", "event", "example", "experience", "eye", "family", "farm", "father", "field",
    "film", "fire", "fish", "flower", "food", "forest", "friend", "game", "garden", "girl",
    "glass", "goal", "group", "growth", "guide", "hair", "hand", "hat", "health", "heart",
    "history", "holiday", "home", "horse", "hospital", "house", "idea", "industry", "information", "island"
]
user_states = {}
def shuffle_word(word):
    word = list(word)
    random.shuffle(word)
    return ''.join(word)

def send_math_question(chat_id):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞
    num1 = random.randint(1, 1000)
    num2 = random.randint(1, 1000)
    operator = random.choice(['+', '-', '*'])

    question = f"{num1} {operator} {num2}"
    correct_answer = eval(question)  # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[chat_id]['current_question'] = question
    user_data[chat_id]['correct_answer'] = correct_answer

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    bot.send_message(chat_id, f"Solve this one: {question}")


# 2 - RANDOM THINGS PART FUNCTIONS
def get_random_fact():
    try:
        url = 'https://uselessfacts.jsph.pl/random.json?language=en'
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            return data['text']
        else:
            return "Could not fetch a fact right now."
    except Exception as e:
        print(f"Error fetching fact: {str(e)}")
        return "Error fetching fact."

def get_random_joke():
    try:
        url = 'https://official-joke-api.appspot.com/random_joke'
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            return f"{data['setup']} - {data['punchline']}"
        else:
            return "Could not fetch a joke right now."
    except Exception as e:
        print(f"Error fetching joke: {str(e)}")
        return "Error fetching joke."

def get_random_photo():
    return f'https://picsum.photos/200/300?random={random.randint(1, 1000)}'

def get_random_motivation():
    try:
        url = 'https://zenquotes.io/api/random'
        response = requests.get(url)
        if response.status_code == 200:
            quotes = response.json()
            random_quote = random.choice(quotes)
            return random_quote['q']
        else:
            return "Could not fetch motivation right now."
    except Exception as e:
        print(f"Error fetching motivation: {str(e)}")
        return f"Error fetching motivation: {str(e)}"

# Remainder FUNCTIONS
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def start_periodic_sender():
    sender_thread = threading.Thread(target=send_periodic_messages, daemon=True)
    sender_thread.start()
def notify_students(chat_id):
    text = ("–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —Å—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–ø—ã BM-23! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ OBIS TEST.\n\n"
            "‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–æ **20 —è–Ω–≤–∞—Ä—è, 17:30**.\n\n"
            "–ö—É—Ç–º–∞–Ω –∫“Ø–Ω, BM-23 —Å—Ç—É–¥–µ–Ω—Ç! OBIS TEST —Å–∏—Å—Ç–µ–º–∞—Å—ã–Ω–¥–∞ —Å–∞–±–∞–∫—Ç–∞—Ä–≥–∞ –∫–∞—Ç—Ç–æ–æ –∫–µ—Ä–µ–∫—Ç–∏–≥–∏–Ω —É–Ω—É—Ç–ø–∞“£—ã–∑.\n\n"
            "‚è≥ –ö–∞—Ç—Ç–æ–æ **20-—è–Ω–≤–∞—Ä—å —Å–∞–∞—Ç 17:30–≥–∞ —á–µ–π–∏–Ω** –∂–µ—Ç–∫–∏–ª–∏–∫—Ç“Ø“Ø.\n\n"
            "by marquez")
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton('üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ OBIS TEST', url='https://obistest.manas.edu.kg/site/login')
    markup.add(button)
    bot.send_message(chat_id, text, reply_markup=markup, parse_mode='Markdown')
def send_periodic_messages():
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ bot.send_message –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """
    connection = get_db_connection()
    cursor = connection.cursor()
    try:
        cursor.execute('SELECT chat_id FROM casino_users')
        chat_ids = cursor.fetchall()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ chat_id

        for chat_id in chat_ids:
            try:
                notify_students(chat_id[0])
            except Exception as e:
                print(f"Error sending update to chat_id {chat_id[0]}: {e}")

    except sqlite3.Error as e:
        print(f"Database error: {e}")
    finally:
        cursor.close()
        connection.close()


# # –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–µ—Ä–∏–æ–¥–æ–º –≤—Ä–µ–º–µ–Ω–∏
# if __name__ == '__main__':
#     init_db()  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –±–∞–∑–∞ –∏ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω—ã
#     start_periodic_sender()



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞


# Initialize database and start polling
init_db()
bot.polling(non_stop=True)
