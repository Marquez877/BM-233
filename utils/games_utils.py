import random
from telebot import types
from database_utils import *
import sqlite3
import requests
from telebot import types
from bot_config import bot

WORDS = [
    "ability", "action", "adventure", "age", "air", "animal", "answer", "area", "army", "art",
    "baby", "back", "ball", "bank", "bed", "bird", "boat", "book", "bottle", "box",
    "boy", "bridge", "brother", "building", "business", "cake", "camera", "car", "cat", "chance",
    "change", "child", "city", "class", "climate", "cloud", "club", "coat", "coffee", "college",
    "color", "company", "computer", "country", "cow", "dance", "day", "deal", "decision", "desk",
    "development", "door", "dream", "drink", "driver", "earth", "education", "effect", "egg", "end",
    "energy", "engine", "event", "example", "experience", "eye", "family", "farm", "father", "field",
    "film", "fire", "fish", "flower", "food", "forest", "friend", "game", "garden", "girl",
    "glass", "goal", "group", "growth", "guide", "hair", "hand", "hat", "health", "heart",
    "history", "holiday", "home", "horse", "hospital", "house", "idea", "industry", "information", "island"
]

user_guess_states = {}


def shuffle_word(word):
    """–ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –±—É–∫–≤—ã –≤ —Å–ª–æ–≤–µ"""
    word = list(word)
    random.shuffle(word)
    return ''.join(word)


def start_guess_word(bot, call):
    """–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã '–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ'"""
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    user_id = call.message.chat.id
    original_word = random.choice(WORDS)
    shuffled_word = shuffle_word(original_word)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_guess_states[user_id] = {
        "original_word": original_word,
        "shuffled_word": shuffled_word
    }

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Å–ª–æ–≤–∞
    markup = types.InlineKeyboardMarkup()
    skip_button = types.InlineKeyboardButton('Skip', callback_data='skip_word')
    markup.add(skip_button)

    bot.send_message(
        user_id,
        f'ü§î Guess the word: **{shuffled_word}**',
        parse_mode='Markdown',
        reply_markup=markup
    )


def check_guess(bot, message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –∏–≥—Ä–µ '–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ'"""
    user_id = message.chat.id
    user_data = user_guess_states.get(user_id)

    if not user_data:
        bot.send_message(user_id, "üòï No active game. Please start a new game.")
        return

    if message.text.lower() == user_data["original_word"]:
        current_balance = get_balance(user_id) or 0
        update_balance(user_id, current_balance + 100)
        update_intelligence_points(user_id, 2)
        bot.send_message(user_id, f"üéâ Correct! You earned +100 üí∞& +2 üß†!")
        user_guess_states.pop(user_id)  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else:
        bot.send_message(user_id, "‚ùå Wrong answer. Try again!")


def skip_guess_word(bot, call):
    """–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞ –≤ –∏–≥—Ä–µ '–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ'"""
    user_id = call.message.chat.id

    if user_id in user_guess_states:
        user_guess_states.pop(user_id)

    bot.send_message(user_id, "üîÑ You skipped the word! Let's try another one.")
    start_guess_word(bot, call)



# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è

TRIVIA_API_URL = "https://opentdb.com/api.php?amount=1&type=boolean"


# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_trivia_states = {}
user_guess_states = {}




# === –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ === #
import html  # –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å HTML-—Å–∏–º–≤–æ–ª–∞–º–∏
import time

def fetch_trivia_question():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ Open Trivia DB API"""
    TRIVIA_API_URL = "https://opentdb.com/api.php?amount=1&type=boolean"

    try:
        response = requests.get(TRIVIA_API_URL)

        if response.status_code == 429:  # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            print("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ...")
            time.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
            return fetch_trivia_question()

        if response.status_code != 200:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã –æ—Ç–≤–µ—Ç–∞
            print(f"–û—à–∏–±–∫–∞: API –≤–µ—Ä–Ω—É–ª –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è {response.status_code}")
            return None, None

        data = response.json()
        if data["response_code"] == 0 and "results" in data and len(data["results"]) > 0:
            question_data = data["results"][0]
            question = html.unescape(question_data["question"])
            correct_answer = question_data["correct_answer"]
            return question, correct_answer

    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}")
        return None, None


def start_trivia_game(bot, call):
    """–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã Trivia Challenge"""
    user_id = call.message.chat.id  # –≠—Ç–æ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = call.message.chat.first_name  # –≠—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –≤ Telegram

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.delete_message(chat_id=user_id, message_id=call.message.message_id)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_player_to_db(user_id, user_name)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–µ—Ä–µ–¥–∞–µ–º –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    question, correct_answer = fetch_trivia_question()
    if not question:
        bot.send_message(user_id, "‚ùå Failed to fetch a question. Please try again later.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_trivia_states[user_id] = {
        "current_question": question,
        "correct_answer": correct_answer
    }

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    markup = types.InlineKeyboardMarkup()
    true_button = types.InlineKeyboardButton("True ‚úÖ", callback_data="trivia_true")
    false_button = types.InlineKeyboardButton("False ‚ùå", callback_data="trivia_false")
    back_button = types.InlineKeyboardButton("üîô Back", callback_data="back_games")
    markup.row(true_button, false_button)
    markup.row(back_button)

    bot.send_message(user_id, f"üéÆ Welcome to Trivia Challenge!\n\nüß† Question: {question}", reply_markup=markup)



def handle_trivia_answer(bot, call, user_answer):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    user_id = call.message.chat.id
    user_name = call.message.chat.first_name
    state = user_trivia_states.get(user_id)

    if not state:
        bot.send_message(user_id, "‚ùå No active game. Please start a new game.")
        return

    correct_answer = state["correct_answer"]

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.delete_message(chat_id=user_id, message_id=call.message.message_id)

    if user_answer == correct_answer:
        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –æ—á–∫–æ–≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
        current_balance = get_balance(user_id)
        update_balance(user_id, current_balance + 50)  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å user_id
        update_intelligence_points(user_id, 1)  # –ó–¥–µ—Å—å –∑–∞–º–µ–Ω–µ–Ω–æ user_name –Ω–∞ user_id
        bot.send_message(user_id, f"üéâ Correct! You earned +50 üí∞ and +1 üß†!")
    else:
        bot.send_message(user_id, f"‚ùå Wrong! The correct answer was: {correct_answer}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    question, correct_answer = fetch_trivia_question()
    if not question:
        bot.send_message(user_id, "‚ùå Failed to fetch a question. Please try again later.")
        user_trivia_states.pop(user_id, None)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_trivia_states[user_id] = {
        "current_question": question,
        "correct_answer": correct_answer
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    markup = types.InlineKeyboardMarkup()
    true_button = types.InlineKeyboardButton("True ‚úÖ", callback_data="trivia_true")
    false_button = types.InlineKeyboardButton("False ‚ùå", callback_data="trivia_false")
    back_button = types.InlineKeyboardButton("üîô Back", callback_data="back_games")
    markup.row(true_button, false_button)
    markup.row(back_button)

    bot.send_message(user_id, f"üß† Next Question: {question}", reply_markup=markup)



