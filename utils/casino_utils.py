
from telebot import types
from database_utils import *
import random
import time
from bot_config import bot
back = 'üîô Back'


def casino_menu(bot, chat_id):
    """–ú–µ–Ω—é –∫–∞–∑–∏–Ω–æ"""
    current_balance = get_balance(chat_id)

    # –¢–µ–∫—Å—Ç —Å –±–∞–ª–∞–Ω—Å–æ–º
    text = (f'We always make you happy with games! üòä\n\n'
            f'*Your current balance: {current_balance} üí∞\n\n*'
            'Choose a game you want to play:')

    # –ú–µ–Ω—é –∫–∞–∑–∏–Ω–æ
    markup = types.InlineKeyboardMarkup()
    roul_button = types.InlineKeyboardButton('ROULETTE üé°', callback_data='roulette')
    throw_cubes_button = types.InlineKeyboardButton('THROW CUBES üé≤', callback_data='throw_cubes')
    rules = types.InlineKeyboardButton('RULES üìÉ', callback_data='rules')
    back_button = types.InlineKeyboardButton(back, callback_data='back')

    markup.row(roul_button, throw_cubes_button)
    markup.row(rules)
    markup.row(back_button)

    bot.send_message(chat_id, text, reply_markup=markup, parse_mode="Markdown")


def roulette_menu(bot, chat_id):
    """–ú–µ–Ω—é —Ä—É–ª–µ—Ç–∫–∏"""
    text = 'Wish good luck üçÄ! Choose a category to bet on:'
    markup = types.InlineKeyboardMarkup()

    # –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å—Ç–∞–≤–æ–∫
    markup.row(
        types.InlineKeyboardButton('1st 12', callback_data='category_1st'),
        types.InlineKeyboardButton('2nd 12', callback_data='category_2nd'),
        types.InlineKeyboardButton('3rd 12', callback_data='category_3rd')
    )

    markup.row(
        types.InlineKeyboardButton('1 to 18', callback_data='category_1-18'),
        types.InlineKeyboardButton('EVEN', callback_data='category_even'),
        types.InlineKeyboardButton('‚ö´Ô∏è', callback_data='category_black'),
        types.InlineKeyboardButton('üî¥', callback_data='category_red'),
        types.InlineKeyboardButton('ODD', callback_data='category_odd'),
        types.InlineKeyboardButton('19 to 36', callback_data='category_19-36')
    )
    markup.row(types.InlineKeyboardButton('Bet on Number üéØ', callback_data='category_number'))
    back_button = types.InlineKeyboardButton(back, callback_data='casino')
    markup.row(back_button)
    bot.send_message(chat_id, text, reply_markup=markup)


def play_roulette(chat_id, bet_amount, category):
    """
    Implements the main roulette game logic.
    """
    import random
    import time

    try:
        valid_categories = {'1st', '2nd', '3rd', '1-18', '19-36', 'even', 'odd', 'red', 'black'}

        if category not in valid_categories:
            bot.send_message(chat_id, "‚ùå Invalid category. Please select a valid betting option.")
            return "Invalid category", get_balance(chat_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä—É–ª–µ—Ç–∫–∏
        roulette_result = random.randint(0, 36)
        current_balance = get_balance(chat_id)

        RED_NUMBERS = {1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36}
        BLACK_NUMBERS = {2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35}

        won = False
        multiplier = 0

        try:
            with open('../media/roulette-game.mp4', 'rb') as gif:
                animation_msg = bot.send_animation(
                    chat_id, gif,
                    caption='üé° *The roulette spins...*\nWill luck be on your side? ü§îüçÄ',
                    parse_mode="Markdown"
                )
            time.sleep(3)
            bot.delete_message(chat_id, animation_msg.message_id)
        except FileNotFoundError:
            bot.send_message(chat_id, "‚ö†Ô∏è Animation file not found. Spinning without animation.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
        if category == '1st' and 1 <= roulette_result <= 12:
            won, multiplier = True, 1.89
        elif category == '2nd' and 13 <= roulette_result <= 24:
            won, multiplier = True, 1.89
        elif category == '3rd' and 25 <= roulette_result <= 36:
            won, multiplier = True, 1.89
        elif category == '1-18' and 1 <= roulette_result <= 18:
            won, multiplier = True, 0.89
        elif category == '19-36' and 19 <= roulette_result <= 36:
            won, multiplier = True, 0.89
        elif category == 'even' and roulette_result != 0 and roulette_result % 2 == 0:
            won, multiplier = True, 0.89
        elif category == 'odd' and roulette_result % 2 == 1:
            won, multiplier = True, 0.89
        elif category == 'red' and roulette_result in RED_NUMBERS:
            won, multiplier = True, 0.89
        elif category == 'black' and roulette_result in BLACK_NUMBERS:
            won, multiplier = True, 0.89

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        if won:
            winnings = int(bet_amount * multiplier)
            new_balance = current_balance + winnings
            update_balance(chat_id, new_balance)
            result_text = (
                f"üéâ *The ball stopped on {roulette_result}!* ü•≥\n"
                f"üí∞ You *WIN*: {winnings} coins!\n"
                f"‚ú® *Congratulations!* Your *new balance*: {new_balance} üí∏"
            )
        else:
            new_balance = current_balance - bet_amount
            update_balance(chat_id, new_balance)
            result_text = (
                f"üíî *The ball stopped on {roulette_result}...*\n"
                f"üòû You *lost*: {bet_amount} coins.\n"
                f"üí∞ Your *current balance*: {new_balance} üí∏\n"
                "üí° *Don't give up!* Maybe luck will visit you soon. üçÄ",
            )

        return result_text, new_balance

    except Exception as e:
        print(f"Error in play_roulette: {e}")
        bot.send_message(chat_id, "‚ö†Ô∏è An error occurred during the game. Please try again later.")
        return f"Error occurred: {e}", get_balance(chat_id)

def rules_menu(chat_id):
    text = (
        "üé∞ *Casino Rules:*\n\n"
        "üéØ *Roulette*: \n"
        "1Ô∏è‚É£ Select a bet category (e.g. '1st 12', 'EVEN', 'RED').\n"
        "2Ô∏è‚É£ Wait for the roulette to show the result.\n"
        "3Ô∏è‚É£ If you win, the reward is bet amount √ó multiplier.\n\n"
        "üé≤ *Throw Cubes*: \n"
        "1Ô∏è‚É£ Choose your bet amount.\n"
        "2Ô∏è‚É£ The player rolls the dice (result: 2 to 12).\n"
        "3Ô∏è‚É£ The bot rolls its dice. If your result is higher, you win your bet.\n"
        "4Ô∏è‚É£ If the bot wins, the bet amount is deducted from your balance.\n\n"
        "Good luck and have fun! üòä"
    )
    markup = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton("üîô Back to Casino Menu", callback_data='casino')
    markup.row(back_button)
    bot.send_message(chat_id, text, reply_markup=markup)
def bet_menu(chat_id, category):
    text = 'How much money üí∞do you want to bet?'
    markup = types.InlineKeyboardMarkup()

    # –ü–µ—Ä–≤—ã–π —Ä—è–¥
    markup.row(
        types.InlineKeyboardButton('100 üí∞', callback_data=f'bet_100_{category}'),
        types.InlineKeyboardButton('500 üí∞', callback_data=f'bet_500_{category}'),
        types.InlineKeyboardButton('1000 üí∞', callback_data=f'bet_1000_{category}')
    )

    # –í—Ç–æ—Ä–æ–π —Ä—è–¥
    markup.row(
        types.InlineKeyboardButton('2500 üí∞', callback_data=f'bet_2500_{category}'),
        types.InlineKeyboardButton('5000 üí∞', callback_data=f'bet_5000_{category}'),
        types.InlineKeyboardButton('10000 üí∞', callback_data=f'bet_10000_{category}')
    )

    # –ö–Ω–æ–ø–∫–∞ "Back"
    back_button = types.InlineKeyboardButton(back, callback_data='roulette')
    markup.add(back_button)

    with open('../media/bet-casino.mp4', 'rb') as gif:
        bot.send_animation(chat_id, gif, caption=text, reply_markup=markup)

import threading
from database_utils import get_balance, update_balance  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö


# –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã: –°—Ç–∞–≤–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
def play_roulette_number(chat_id, bet_amount, number, bot):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–≥—Ä—ã —Ä—É–ª–µ—Ç–∫–∏ –Ω–∞ —á–∏—Å–ª–∞.
    """
    try:
        roulette_result = random.randint(0, 36)
        current_balance = get_balance(chat_id)

        if current_balance is None or bet_amount <= 0 or bet_amount > current_balance:
            return "Invalid bet: make sure your bet is positive and within your balance.", current_balance

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –≤—Ä–∞—â–µ–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏
        with open('../media/roulette-game.mp4', 'rb') as gif:
            animation_msg = bot.send_animation(chat_id, gif, caption='The ball is spinning...')
        time.sleep(4)
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–∏—Ñ–∫–æ–π —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏
        threading.Timer(0.1, lambda: bot.delete_message(chat_id, animation_msg.message_id)).start()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if roulette_result == number:
            multiplier = 35
            winnings = int(bet_amount * multiplier)
            new_balance = current_balance + winnings
            update_balance(chat_id, new_balance)
            return (
                f"You WON! üéâ The ball landed on {roulette_result}. Your winnings: {winnings}. New balance: {new_balance}.",
                new_balance
            )
        else:
            new_balance = current_balance - bet_amount
            update_balance(chat_id, new_balance)
            return (
                f"You LOST. üò¢ The ball landed on {roulette_result}. Your new balance: {new_balance}.",
                new_balance
            )

    except Exception as e:
        print(f"Error in play_roulette_number: {e}")
        return "Internal error occurred. Please try again later.", None

import telebot

def process_number_bet(chat_id, number, bet_message, bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏, –±–∞–ª–∞–Ω—Å –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∏–≥—Ä—É.
    """
    try:
        bet_amount = int(bet_message.text)
        current_balance = get_balance(chat_id)

        if bet_amount <= 0:
            bot.send_message(chat_id, "‚ùå Bet amount must be greater than zero.")
            bot.register_next_step_handler(
                bet_message,
                lambda bm: process_number_bet(chat_id, number, bm, bot)
            )
            return
        elif bet_amount > current_balance:
            bot.send_message(
                chat_id,
                "üò¢ *Your balance is insufficient for this bet.*\nüí° Try a smaller wager or earn more coins!",
                parse_mode="Markdown"
            )
            time.sleep(2)
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É

        # –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
        result_message, new_balance = play_roulette_number(chat_id, bet_amount, number, bot)

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        markup = telebot.types.InlineKeyboardMarkup()  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º telebot.types
        markup.add(
            telebot.types.InlineKeyboardButton('Play Again üîÑ', callback_data=f'roulette'),
            telebot.types.InlineKeyboardButton('Casino Menu üé∞', callback_data='casino'),
        )
        bot.send_message(chat_id, result_message, reply_markup=markup)

    except ValueError:
        bot.send_message(chat_id, "‚ùå Please enter a valid bet amount.")
        bot.register_next_step_handler(
            bet_message,
            lambda bm: process_number_bet(chat_id, number, bm, bot)
        )

def handle_number_bet(message, bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏.
    """
    try:
        number = int(message.text)  # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –≤ —á–∏—Å–ª–æ
        if not 0 <= number <= 36:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            bot.send_message(message.chat.id, "‚ùå Please enter a valid number between 0 and 36.")
            bot.register_next_step_handler(message, lambda m: handle_number_bet(m, bot))
            return

        # –ï—Å–ª–∏ —á–∏—Å–ª–æ –≤–∞–ª–∏–¥–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
        bot.send_message(
            message.chat.id,
            f"You selected number {number} ‚ú®. How much money do you want to bet? üí∏"
        )
        bot.register_next_step_handler(
            message,
            lambda bet_message: process_number_bet(message.chat.id, number, bet_message, bot)
        )

    except ValueError:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ —á–∏—Å–ª–æ
        bot.send_message(message.chat.id, "‚ùå Please enter a valid number between 0 and 36.")
        bot.register_next_step_handler(message, lambda m: handle_number_bet(m, bot))

def show_forbes(chat_id):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–ø-10 –±–æ–≥–∞—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –§–æ—Ä–º–∞—Ç: –º–µ—Å—Ç–æ, –∏–º—è, –±–∞–ª–∞–Ω—Å. –ú–µ–¥–∞–ª–∏ –¥–ª—è 1-3 –º–µ—Å—Ç.
    """
    connection = get_db_connection()
    cursor = connection.cursor()

    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –±–∞–ª–∞–Ω—Å–æ–º
        cursor.execute("SELECT first_name, balance FROM casino_users ORDER BY balance DESC LIMIT 10")
        top_users = cursor.fetchall()

        # –ï—Å–ª–∏ —Ç–æ–ø –ø—É—Å—Ç–æ–π
        if not top_users:
            bot.send_message(chat_id, "Forbes list is empty üôÅ")
            return

        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = "üí∏ *FORBES Richest Players*\n\nüèÜ Here are the wealthiest players daring to challenge luck:\n\n"
        medals = ["ü•á", "ü•à", "ü•â"]  # –ú–µ–¥–∞–ª–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä—ë—Ö –º–µ—Å—Ç

        for index, (name, balance) in enumerate(top_users, start=1):
            if index <= 3:
                medal = medals[index - 1]  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –º–µ–¥–∞–ª—å –¥–ª—è 1-3 –º–µ—Å—Ç
            else:
                medal = f"{index}‚É£"  # –û—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî —á–∏—Å–ª–æ —Å —ç–º–æ–¥–∑–∏
            text += f"{medal} *{index}.* {name} ‚Äî {balance} üí∞\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
        markup = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton("üîô Back", callback_data="back")
        markup.add(back_button)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.send_message(chat_id, text, reply_markup=markup, parse_mode="Markdown")

    except Exception as e:
        # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        bot.send_message(chat_id, f"An error occurred: {e}")
        print(f"Error fetching Forbes data: {e}")
    finally:
        cursor.close()
        connection.close()