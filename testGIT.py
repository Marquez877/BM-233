from utils.random_utils import *
from utils.throw_cubes import *
from utils.casino_utils import *
from utils.games_utils import *
from utils.some_name_for_this_func import *
from utils.profile import *
from utils.jobs_utils import *
bot = telebot.TeleBot('7244608311:AAHrlYJnzHwBpTTZ1Js7QG6gBTwDxtmx3Yw')
db_path = 'casino.db'
user_states = {}
back = 'üîô Back'
casino_players = {}
init_trivia_db()
@bot.message_handler(commands=['sqlite3_private_info'])
def show_users(message):
    try:
        # –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        allowed_users = [894222865]  # –ó–∞–º–µ–Ω–∏—Ç–µ chat_id –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ

        if message.chat.id not in allowed_users:
            bot.send_message(chat_id=message.chat.id, text="You are not authorized to use this command.")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
        connection = get_db_connection()
        cursor = connection.cursor()

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('SELECT chat_id, first_name FROM casino_users')
        casino_players = cursor.fetchall()

        if casino_players:  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã
            text = "Saved users:\n"
            for user in casino_players:
                chat_id, first_name = user
                text += f"Chat ID: {chat_id}, Name: {first_name}\n"

                # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤
                if len(text) > 4000:
                    bot.send_message(chat_id=message.chat.id, text=text)
                    text = ""  # –°–±—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞

            if text:  # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞—Ç–∫–∞
                bot.send_message(chat_id=message.chat.id, text=text)
        else:
            bot.send_message(chat_id=message.chat.id, text="No users saved yet.")

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        bot.send_message(chat_id=message.chat.id, text=f"An error occurred: {e}")
    finally:
        cursor.close()
        connection.close()

# Start Command
@bot.message_handler(commands=['start'])
def start(message):
    add_user(message.chat.id, message.from_user.first_name)
    chat_id = message.chat.id
    first_name = message.chat.first_name

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    text = (
        f"üëã *Welcome, {first_name}!*\n\n"
        "I'm *MarqBot*, your friendly assistant! üòé\n\n"
        "üåü Explore games, enjoy random facts, and test your luck at the casino. \n"
        "‚ú® Let's get started and have some *fun!* üéâ"
    )

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    photos = bot.get_user_profile_photos(chat_id)
    if photos.total_count > 0:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä–∫–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é
        avatar_file_id = photos.photos[0][0].file_id
        bot.send_photo(chat_id, avatar_file_id, caption=text,parse_mode="Markdown")
    else:
        # –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ç–æ
        with open("media/cat.jpg",
                  "rb") as photo:
            bot.send_photo(chat_id, photo, caption=text,parse_mode="Markdown")

        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    send_menu(chat_id=chat_id,bot=bot)
#GPT part
@bot.callback_query_handler(func=lambda call: call.data == 'gpt')
def gpt1(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    bot.send_message(call.message.chat.id, "You can use this free Telegram-Bot to ask quetions: @Buddy_GPTbot ")
    send_menu(call.message.chat.id,bot)
@bot.callback_query_handler(func=lambda call: call.data == 'my_profile')
def profile_callback(call):
    from utils.profile import my_profile
    chat_id = call.message.chat.id
    bot.delete_message(chat_id=chat_id, message_id=call.message.message_id)
    my_profile(call.message.chat.id)


# Callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
@bot.callback_query_handler(func=lambda call: call.data == 'edit_profile_name')
def edit_profile_name_callback(call):
    chat_id = call.message.chat.id
    bot.delete_message(chat_id=chat_id, message_id=call.message.message_id)
    user_states[chat_id] = 'awaiting_name'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–æ–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏"
    bot.send_message(chat_id, "Please, enter your new name:")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'awaiting_name')
def process_new_name(message):
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_states.get(chat_id) != 'awaiting_name':
        bot.send_message(chat_id, "‚ö†Ô∏è Wrong state. Please, try again later.")
        return

    new_name = message.text.strip()  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ –∏–º—è
    from utils.profile import name_exists, update_first_name, my_profile
    if name_exists(new_name):
        bot.send_message(chat_id, f" This name *{new_name}* is already taken. Please, choose another one.",
                         parse_mode="Markdown")
        return  # –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_first_name(chat_id, new_name)
    bot.send_message(chat_id, f"*Your name has been successfully updated to* *{new_name}*!", parse_mode="Markdown")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states.pop(chat_id, None)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    my_profile(chat_id)
# Information Part
@bot.callback_query_handler(func=lambda call: call.data == 'info')
def info1(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    info(call.message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == 'owner')
def about_owner(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    text = "üßë‚Äçüíª My owner is Marquez - @marquezpht üòé. Write to him if you have any problems with the bot or if you find any errors and help improve it üòä"
    bot.send_message(call.message.chat.id, text)
    info(call.message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == 'bot owner')
def about_owner(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    text = "This bot is designed to help and entertain people"
    bot.send_message(call.message.chat.id, text)
    info(call.message.chat.id)


# Manas Part
@bot.callback_query_handler(func=lambda call: call.data == 'manas')
def manas1(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    manas(call.message.chat.id)


# Games Part
@bot.callback_query_handler(func=lambda call: call.data == 'games') # –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–π—Ç–∏
def games1(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    games(call.message.chat.id)

#Guess Word
@bot.callback_query_handler(func=lambda call: call.data == 'guess_word') # –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
def start_new_game(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    user_id = call.message.chat.id
    original_word = random.choice(WORDS)
    shuffled_word = shuffle_word(original_word)
    user_states[user_id] = {
        "original_word": original_word,
        "shuffled_word": shuffled_word
    }
    markup = types.InlineKeyboardMarkup()
    skip_button = types.InlineKeyboardButton('Skip', callback_data='skip_word')
    markup.add(skip_button)
    bot.send_message(user_id, f'Guess the word: **{shuffled_word}**', parse_mode='Markdown', reply_markup=markup)

@bot.message_handler(func=lambda message: message.chat.id in user_states) # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏
def check_guess(message):
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    user_id = message.chat.id
    user_data = user_states.get(user_id)

    if message.text.lower() == user_data["original_word"]:
        current_balance = get_balance(user_id)
        update_balance(user_id, current_balance + 100)
        bot.send_message(user_id, "Correct! üéâ Great job! You got +100 üí∞")

        # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        user_states.pop(user_id)

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
        markup = types.InlineKeyboardMarkup()
        play_again = types.InlineKeyboardButton('Play Again', callback_data='guess_word')
        back_button = types.InlineKeyboardButton(back, callback_data='back')
        markup.row(play_again)
        markup.row(back_button)
        bot.send_message(user_id, "Want to play again?", reply_markup=markup)
    else:
        bot.send_message(user_id, "Wrong answer. Try again!")

@bot.callback_query_handler(func=lambda call: call.data == 'skip_word') # –ø—Ä–æ–ø—É—Å–∫ —Å–ª–æ–≤–∞
def skip_word(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    user_id = call.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_states:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª
        original_word = user_states[user_id]["original_word"]

        # –°–æ–æ–±—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        bot.send_message(user_id, f"You skipped the word. The correct word was: **{original_word}**",
                         parse_mode='Markdown')

        # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states.pop(user_id)

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
        markup = types.InlineKeyboardMarkup()
        play_again = types.InlineKeyboardButton('Play Again', callback_data='guess_word')
        back_button = types.InlineKeyboardButton(back, callback_data='back_games')
        markup.add(play_again)
        markup.row(back_button)
        bot.send_message(user_id, "Want to play again?", reply_markup=markup)
    else:
        # –ï—Å–ª–∏ –∏–≥—Ä—ã –Ω–µ –±—ã–ª–æ
        bot.send_message(user_id, "No active game found. Start a new game!")

#Mathematicians game
user_data = {}

@bot.callback_query_handler(func=lambda call: call.data == 'math_game')
def start_math_game(call):
    chat_id = call.message.chat.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[chat_id] = {
        "score": 0,  # –û—á–∫–∏
        "current_question": None,  # –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        "correct_answer": None  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    }
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    bot.send_message(chat_id, "Welcome to the 'Math Game'! üî¢")
    send_math_question(chat_id)
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.chat.id in user_data)
def handle_math_answer(message):
    chat_id = message.chat.id
    text = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç —á–∏—Å–ª–æ–º
    if not text.lstrip('-').isdigit():
        bot.send_message(chat_id, "Please enter a valid number.")
        bot.send_message(chat_id, "Enter the number as a reply to the question.")
        return

    user_answer = int(text)
    correct_answer = user_data[chat_id]['correct_answer']

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
    if user_answer == correct_answer:
        user_data[chat_id]['score'] += 1
        current_balance = get_balance(chat_id)
        new_balance = current_balance + 50
        update_balance(chat_id, new_balance)
        update_intelligence_points(chat_id, 1)
        bot.send_message(chat_id, "CONGRATULATIONS! You got it right! üéâ +50 üí∞& +1 üß†!")
    else:
        bot.send_message(chat_id, f"Wrong answer üòû. The answer correct is: {correct_answer}")

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∏–≥—Ä
    markup = types.InlineKeyboardMarkup()
    continue_button = types.InlineKeyboardButton("Continue üîÑ", callback_data='continue_math_game')
    back_to_games = types.InlineKeyboardButton("BACK üîô", callback_data='back_games')
    markup.row(continue_button, back_to_games)
    bot.send_message(chat_id, "Choose what will you do next:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'continue_math_game')
def continue_math_game1(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    send_math_question(call.message.chat.id)

def send_math_question(chat_id):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞
    num1 = random.randint(1, 50)
    num2 = random.randint(1, 50)
    operator = random.choice(['+', '-'])

    question = f"{num1} {operator} {num2}"
    correct_answer = eval(question)  # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[chat_id]['current_question'] = question
    user_data[chat_id]['correct_answer'] = correct_answer

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    bot.send_message(chat_id, f"Solve this one: {question}")

@bot.callback_query_handler(func=lambda call: call.data == 'back_games')
def back_games1(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    games(call.message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == "trivia_challenge")
def start_game(call):
    start_trivia_game(bot, call)


@bot.callback_query_handler(func=lambda call: call.data in ["trivia_true", "trivia_false"])
def process_answer(call):
    user_answer = "True" if call.data == "trivia_true" else "False"
    handle_trivia_answer(bot, call, user_answer)

#Random Things Part
@bot.callback_query_handler(func=lambda call: call.data == 'random_play')
def random_play1(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    random_things(call.message.chat.id)
@bot.callback_query_handler(func=lambda call: call.data == 'random_fact')
def random_fact1(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    fact = get_random_fact()
    bot.send_message(call.message.chat.id, f"üß† Random Fact: {fact}")
    random_things(call.message.chat.id)
@bot.callback_query_handler(func=lambda call: call.data == 'random_motivation')
def random_motivation1(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    motivation = get_random_motivation()
    bot.send_message(call.message.chat.id, f"üí™ Random Motivation: {motivation}")
    random_things(call.message.chat.id)
@bot.callback_query_handler(func=lambda call: call.data == 'random_photo')
def random_photo1(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    photo = get_random_photo()
    bot.send_photo(call.message.chat.id, photo)
    random_things(call.message.chat.id)
@bot.callback_query_handler(func=lambda call: call.data == 'random_joke')
def random_joke1(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    joke = get_random_joke()
    bot.send_message(call.message.chat.id, f"üòÇ Random Joke: {joke}")
    random_things(call.message.chat.id)



# Handle Callbacks
@bot.callback_query_handler(func=lambda call: True)
def handle_callbacks(call):
    if call.data == 'casino':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        casino_menu(bot, call.message.chat.id)  # –î–æ–±–∞–≤–ª—è–µ–º bot
    elif call.data == 'roulette':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        roulette_menu(bot, call.message.chat.id)  # –î–æ–±–∞–≤–ª—è–µ–º bot
    elif call.data == 'rules':  # Show rules
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        rules_menu(call.message.chat.id)  # –î–æ–±–∞–≤–ª—è–µ–º bot
    elif call.data == 'category_number':  # –°—Ç–∞–≤–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(call.message.chat.id, "üéØ Enter the number you want to bet on (0-36):")
        bot.register_next_step_handler_by_chat_id(call.message.chat.id, lambda m: handle_number_bet(m, bot))  # bot –Ω–µ –Ω—É–∂–µ–Ω
    elif call.data == 'throw_cubes':  # Throw Cubes game
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(call.message.chat.id, "üí∞ Enter your bet amount:")
        bot.register_next_step_handler_by_chat_id(call.message.chat.id, handle_throw_cubes_bet)

    elif call.data.startswith('category_'):
        category = call.data.split('_')[1]
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bet_menu(call.message.chat.id, category)

    elif call.data.startswith('bet_'):
        try:
            _, bet_amount, category = call.data.split('_')
            bet_amount = int(bet_amount)
        except ValueError:
            bot.send_message(call.message.chat.id, "‚ùå Invalid bet parameters. Try again.")
            return

        current_balance = get_balance(call.message.chat.id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        if current_balance is None:
            bot.send_message(call.message.chat.id, "‚ùå Error: Unable to fetch your balance. Please try again later.")
            return
        if bet_amount <= 0:
            bot.send_message(call.message.chat.id, "‚ùå Bet amount must be greater than zero.")
            return
        if bet_amount > current_balance:
            bot.send_message(
                call.message.chat.id,
                f"‚ùå Insufficient funds for the bet! Balance: {current_balance} üí∞. Try again."
            )
            bet_menu(call.message.chat.id, category)
            return

        # –ü—Ä–æ–≤–µ—Ä–∏–º –≤–æ–∑–≤—Ä–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ play_roulette
        result = play_roulette(call.message.chat.id, bet_amount, category)

        if result is None or not isinstance(result, tuple) or len(result) != 2:
            bot.send_message(
                call.message.chat.id,
                "‚ùå An error occurred while processing your bet. Please try again."
            )
            bet_menu(call.message.chat.id, category)
            return

        # –†–∞—Å–ø–∞–∫—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_message, new_balance = result

        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton('Play Again ‚èé', callback_data=f'roulette'),
            types.InlineKeyboardButton('Back to Table üîô', callback_data='casino')
        )
        bot.send_message(call.message.chat.id, result_message, reply_markup=markup, parse_mode="Markdown")
    elif call.data == 'back':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        send_menu(call.message.chat.id,bot)
    elif call.data == 'back_games':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        games(bot, call.message.chat.id)
    elif call.data == 'forbes':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        show_forbes(call.message.chat.id)
    elif call.data == 'jobs':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        chat_id = call.message.chat.id
        first_name = call.message.chat.first_name

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö intellect.db
        connection = sqlite3.connect("intellect.db")
        cursor = connection.cursor()

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ job_users —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute("""
                CREATE TABLE IF NOT EXISTS job_users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    chat_id INTEGER UNIQUE NOT NULL,
                    first_name TEXT
                )
            """)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        cursor.execute("SELECT chat_id FROM job_users WHERE chat_id = ?", (chat_id,))
        user_exists = cursor.fetchone()

        if user_exists is None:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º
            cursor.execute(
                "INSERT INTO job_users (chat_id, first_name) VALUES (?, ?)",
                (chat_id, first_name)
            )
            connection.commit()
            bot.send_message(chat_id, "‚úÖ You have been successfully added to the Jobs database!")
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω
            bot.send_message(chat_id, "‚ÑπÔ∏è You are already in the Jobs database!")

        cursor.close()
        connection.close()

        # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–∞–±–æ—Ç—ã
        jobs_menu(chat_id, bot)
    elif call.data == 'loader':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        loader_job(call.message.chat.id, bot)  # –ü–µ—Ä–µ–¥–∞–µ–º `bot` –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
    elif call.data == 'deliver':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        courier_job(call.message.chat.id, bot)  # –ü–µ—Ä–µ–¥–∞–µ–º `bot` –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
    elif call.data == 'baker':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        baker_job(call.message.chat.id, bot)  # –ü–µ—Ä–µ–¥–∞–µ–º `bot` –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
    elif call.data == 'programmer':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        programmer_job_jun(call.message.chat.id, bot)  # –ü–µ—Ä–µ–¥–∞–µ–º `bot` –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
    elif call.data == 'about_jobs':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        about_jobs(call.message.chat.id,bot)



# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏



# 1 - GAMES PART FUNCTION

user_states = {}






# Remainder FUNCTIONS
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def start_periodic_sender():
    sender_thread = threading.Thread(target=send_periodic_messages, daemon=True)
    sender_thread.start()
def send_periodic_messages():
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ bot.send_message –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """
    connection = get_db_connection()
    cursor = connection.cursor()
    try:
        cursor.execute('SELECT chat_id FROM casino_users')
        chat_ids = cursor.fetchall()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ chat_id

        for chat_id in chat_ids:
            try:
                bot.send_message(
                    chat_id[0],
                    "The issues have been resolved. The bot is now fully operational ‚úÖ\n\n"
                    "by marquez",
                    parse_mode="Markdown"
                )
            except Exception as e:
                print(f"Error sending update to chat_id {chat_id[0]}: {e}")

    except sqlite3.Error as e:
        print(f"Database error: {e}")
    finally:
        cursor.close()
        connection.close()


# –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–µ—Ä–∏–æ–¥–æ–º –≤—Ä–µ–º–µ–Ω–∏
# if __name__ == '__main__':
#     init_db()  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –±–∞–∑–∞ –∏ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω—ã
#     start_periodic_sender()



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞


# Initialize database and start polling
init_db()
init_trivia_db()
bot.polling(non_stop=True)
